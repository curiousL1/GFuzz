package config

type Config struct {
	OracleRtDebug    bool
	OutputDir        string // Output directory, each folder contains output(stdout), record (generated by gooracle) and input (generated by fuzzer/changed by goorcle at first run)
	GlobalTuple      bool   // Recording executed select combination in global or not (per Goroutine)
	MaxParallel      int    // Max Parallel worker (how many fuzz target can be run at the same time)
	ScoreSdk         bool   // recording/scoring if channel comes from Go SDK
	ScoreAllPrim     bool   // recording/scoring other primitives like Mutex together with channel
	OpCover          string // File path of channel statistics (generated by printOperation)
	TargetTestPkg    string
	TargetTestBin    string // used given binary file(compiled binary of all tests) to trigger test run instead of `go test`
	GoRoot           string
	TimeDivide       int  // Durations in time package will be divided by this int number
	IsIgnoreFeedback bool // Is ignoring the feedback, and save every mutated seed into the fuzzing queue
	RandMutateEnergy int  // Determine the energy of random mutations. If == 100, then each seed would mutate 100 times in the rand mutation stage.
	IsDisableScore   bool // Is disable score to priority testing case
	IsNoMutation     bool // Disable mutations on all testing case.
	SelEfcmTimeout   int  // timeout for select enforcement (ms)
}

func NewConfig() *Config {
	return &Config{
		MaxParallel:    1,
		SelEfcmTimeout: 500,
	}
}
