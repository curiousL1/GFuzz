package config

type Config struct {
	OracleRtDebug           bool
	FuzzerSelectDelayVector []int
	OutputDir               string // Output directory, each folder contains output(stdout), record (generated by gooracle) and input (generated by fuzzer/changed by goorcle at first run)
	GlobalTuple             bool   // Recording executed select combination in global or not (per Goroutine)
	MaxParallel             int    // Max Parallel worker (how many fuzz target can be run at the same time)
	ScoreSdk                bool   // recording/scoring if channel comes from Go SDK
	ScoreAllPrim            bool   // recording/scoring other primitives like Mutex together with channel
	OpCover                 string // File path of channel statistics (generated by printOperation)
	TargetTestPkg           string
	TargetTestBin           string // used given binary file(compiled binary of all tests) to trigger test run instead of `go test`
	GoRoot                  string
	TimeDivide              int  // Durations in time package will be divided by this int number
	IsIgnoreFeedback        bool // Is ignoring the feedback, and save every mutated seed into the fuzzing queue
}

func NewConfig() *Config {
	return &Config{
		FuzzerSelectDelayVector: []int{500, 2000, 8000},
		MaxParallel:             1,
	}
}
